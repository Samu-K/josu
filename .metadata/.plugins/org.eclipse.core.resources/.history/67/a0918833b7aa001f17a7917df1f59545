/*
 * Pixel.c
 *
 *  Created on: -----
 *      Author: -----
 */

#include "Pixel.h"
#include <stdio.h>

#define CTRL *(uint8_t *) 0x41220008
#define CHANNEL *(uint8_t *) 0x41220000

#define RST_BIT ((uint8_t)0x01)
#define LAT_BIT ((uint8_t)0x02)
#define SB_BIT ((uint8_t)0x04)
#define SCK_BIT ((uint8_t)0x08)
#define SDA_BIT ((uint8_t)0x10)

//Table for pixel dots.
//				 dots[X][Y][COLOR]
volatile uint8_t dots[8][8][3]={0};


// Here the setup operations for the LED matrix will be performed
void setup(){
	printf("%s","setup reached\n");
	CTRL = 0x00;
	CHANNEL = 0x00;

	//reseting screen at start is a MUST to operation (Set RST-pin to 1).
	CTRL |= RST_BIT;
	usleep(500);
	CTRL &= ~RST_BIT;
	usleep(500);
	CTRL |= RST_BIT;

	// set sda bit to 1
	CTRL |= SDA_BIT;

	//Write code that sets 6-bit values in register of DM163 chip. Recommended that every bit in that register is set to 1. 6-bits and 24 "bytes", so some kind of loop structure could be nice.
	//24*6 bits needs to be transmitted

    // Loop to send 24 values (each 6 bits set to 1 = 0x3F)
    for (int i = 0; i < 144; i++) {
    	CTRL &= ~SCK_BIT;
    	CTRL |= SCK_BIT;
    }


	//Final thing in this function is to set SB-bit to 1 to enable transmission to 8-bit register.
    CTRL |= SB_BIT;
    printf("%s","setup done\n");
}

//Change value of one pixel at led matrix. This function is only used for changing values of dots array
void SetPixel(uint8_t x,uint8_t y, uint8_t r, uint8_t g, uint8_t b){
	//Hint: you can invert Y-axis quite easily with 7-y
	dots[x][y][0]=b;
	//Write rest of two lines of code required to make this function work properly (green and red colors to array).
	dots[x][y][1]=g;
	dots[x][y][2]=r;

}


//Put new data to led matrix. Hint: This function is supposed to send 24-bytes and parameter x is for channel x-coordinate.
void run(uint8_t x){
	printf("%s","run reached\n");

	CTRL &=  ~LAT_BIT;
	//Write code that writes data to led matrix driver (8-bit data). Use values from dots array
	//Hint: use nested loops (loops inside loops)
	//Hint2: loop iterations are 8,3,8 (pixels,color,8-bitdata)
	for(uint8_t y=0; y<8;y++) {
		for(uint8_t color=0;color<3;color++) {
			printf("%s","run y:");
			printf("%d",y);
			printf("%s","\n");
			uint8_t temp = dots[x][y][color];
			printf("%s","run temp:");
			printf("%d",temp);
			printf("%s","\n");
			for(uint8_t byte_count=0;byte_count<8;byte_count++) {
				if ((temp >> byte_count) & 0x01) {
					CTRL |= SDA_BIT;
				} else {
					CTRL &= ~SDA_BIT;
				}
				CTRL &= ~SCK_BIT;
				CTRL |= SCK_BIT;
			}
		}
	}
	latch();
	CTRL &= ~SCK_BIT;
	printf("%s","run finished\n");

}

//Latch signal. See colorsshield.pdf or DM163.pdf in project folder on how latching works
void latch(){
	CTRL |= LAT_BIT;
	CTRL &= ~LAT_BIT;

}


//Set one line (channel) as active, one at a time.
void open_line(uint8_t x){
	CHANNEL = 0x00;
	switch (x) {
		case 0: CHANNEL |= 0x01;
		case 1: CHANNEL |= 0x02;
		case 2: CHANNEL |= 0x04;
		case 3: CHANNEL |= 0x08;
		case 4: CHANNEL |= 0x10;
		case 5: CHANNEL |= 0x20;
		case 6: CHANNEL |= 0x40;
		case 7: CHANNEL |= 0x80;
		default: CHANNEL = 0x00;
	}
}



